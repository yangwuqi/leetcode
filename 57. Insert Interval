//这只是一个随手的foolish solution，yangwuqi
//12ms，faster than 100%

func insert(intervals []Interval, newInterval Interval) []Interval {//判断左边和右边分别是完全超出还是刚好相交还是完全不交，然后给出结果
    if len(intervals)==0{
        return []Interval{newInterval}
    }
    var flag1,flag2 int
    left,right,index1,index2:=-1,-1,-1,-1//用left和right和index1和index2来标识左边界和右边界的具体位置
    for i:=0;i<len(intervals);i++{
        if flag1==0{
        if intervals[i].Start>=newInterval.Start{
            left=i
            index1=0//这里的0代表左边界是newInterval.Start
            flag1=1
        }else if intervals[i].End>=newInterval.Start{
            left=i
            index1=1//这里的1代表左边界是intervals[left].Start
            flag1=1
        }
        }
        if flag2==0{
        if intervals[len(intervals)-1-i].End<=newInterval.End{
            right=len(intervals)-1-i
            index2=0//这里的0代表右边界是newInterval.End
            flag2=1
        }else if intervals[len(intervals)-1-i].Start<=newInterval.End{
            right=len(intervals)-1-i
            index2=1//这里的1代表右边界是intervals[right].End
            flag2=1
        }
        }
    }
    if flag1==0{//说明在intervals不为空的情况下，从左到右没有大于等于newInterval.Start的元素
        intervals=append(intervals,newInterval)
    }
    if flag2==0{//说明在intervals不为空的情况下，从右往左没有小于等于newInterval.End的元素
        intervals=append([]Interval{newInterval},intervals[:]...)
    }
    if flag1==1&&flag2==1{//index1==0代表左边界是newInterval.Start, index1==1代表左边界是intervals[left].Start
        var temp []Interval//而index2==0代表右边界是newInterval.End, index2==1代表右边界是intervals[right].End
        for i:=0;i<len(intervals[right+1:]);i++{
            temp=append(temp,intervals[right+1:][i])
        }
        if index1==1&&index2==1{
            intervals=append(intervals[:left],Interval{intervals[left].Start,intervals[right].End})
        }else if index1==1&&index2==0{
            intervals=append(intervals[:left],Interval{intervals[left].Start,newInterval.End}) 
        }else if index1==0&&index2==1{
            intervals=append(intervals[:left],Interval{newInterval.Start,intervals[right].End})
        }else if index1==0&&index2==0{
            intervals=append(intervals[:left],Interval{newInterval.Start,newInterval.End})  
        }
        intervals=append(intervals[:],temp[:]...)
    }
    return intervals
}
