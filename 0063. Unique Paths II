//这只是一个随手的foolish solution，yangwuqi
//4ms, faster than 100%

func uniquePathsWithObstacles(obstacleGrid [][]int) int {
    if obstacleGrid[0][0]==1{
        return 0
    }
    n:=len(obstacleGrid)
    m:=len(obstacleGrid[0])
    ways:=make([][]int,n)//因为路径只能从上方邻居或者左方邻居过来，这样就能推出全图每个点的可能路径数量
    for i:=0;i<n;i++{
        ways[i]=make([]int,m)
    }
    ways[0][0]=1
    for i:=0;i<n;i++{
        for j:=0;j<m;j++{
            if i>0&&j>0{
                if obstacleGrid[i][j]==1{
                ways[i][j]=0
                }else{
                ways[i][j]=ways[i-1][j]+ways[i][j-1]
                }
            }else if i==0&&j>0{
                if obstacleGrid[i][j]==1{
                ways[i][j]=0
                }else{
                ways[i][j]=ways[0][j-1]
                }
            }else if i>0&&j==0{
                if obstacleGrid[i][j]==1{
                ways[i][j]=0
                }else{
                ways[i][j]=ways[i-1][0]
                }
            }
        }
    }
    return ways[n-1][m-1]
}
