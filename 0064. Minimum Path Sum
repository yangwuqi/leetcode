//这只是一个随手的foolish solution，yangwuqi
//12ms, faster than 100%

//我们可以从第一个点开始递推出所有点到第一个点的最短的距离，然后取需要的那个点的
//DP完事，当然如果直接用最短路径做应该也可以
func minPathSum(grid [][]int) int {
    m:=len(grid)
    n:=len(grid[0])
    dis:=make([][]int,m)
    for i:=0;i<m;i++{
        dis[i]=make([]int,n)
    }
    dis[0][0]=grid[0][0]
    for i:=0;i<m;i++{
        for j:=0;j<n;j++{
            if i==0&&j>0{
                dis[i][j]=dis[i][j-1]+grid[i][j]
            }else if i>0&&j==0{
                dis[i][j]=dis[i-1][j]+grid[i][j]
            }else if i>0&&j>0{
                dis[i][j]=min(dis[i-1][j],dis[i][j-1])+grid[i][j]
            }
        }
    }
    return dis[m-1][n-1]
}
func min(x int, y int)int{
    if x>y{
        return y
    }
    return x
}
